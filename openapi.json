{
    "openapi": "3.0.1",
    "info": {
        "title": "Dynamic API Specification",
        "description": "This is a dynamically generated API specification for all endpoints existing on the current project.",
        "version": "11.5.1"
    },
    "servers": [
        {
            "url": "https://jk100-admin.johannische-kirche.org",
            "description": "Your current Directus instance."
        }
    ],
    "paths": {
        "/assets/{id}": {
            "get": {
                "tags": [
                    "Assets"
                ],
                "operationId": "getAsset",
                "summary": "Get an Asset",
                "description": "Image typed files can be dynamically resized and transformed to fit any need.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the file.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "query",
                        "description": "The key of the asset size configured in settings.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "transforms",
                        "in": "query",
                        "description": "A JSON array of image transformations",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "download",
                        "in": "query",
                        "description": "Download the asset to your computer",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "summary": "Retrieve a Temporary Access Token",
                "description": "Retrieve a Temporary Access Token",
                "tags": [
                    "Authentication"
                ],
                "operationId": "login",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "example": "admin@example.com",
                                        "description": "Email address of the user you're retrieving the access token for."
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "Password of the user.",
                                        "format": "password",
                                        "example": "password"
                                    },
                                    "mode": {
                                        "type": "string",
                                        "enum": [
                                            "json",
                                            "cookie",
                                            "session"
                                        ],
                                        "default": "json",
                                        "description": "Whether to retrieve the refresh token in the JSON response, or in a httpOnly cookie."
                                    },
                                    "otp": {
                                        "type": "string",
                                        "description": "The user's one-time-password (if MFA is enabled)."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful authentification",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "access_token": {
                                                    "type": "string",
                                                    "example": "eyJhbGciOiJI..."
                                                },
                                                "expires": {
                                                    "type": "integer",
                                                    "example": 900
                                                },
                                                "refresh_token": {
                                                    "type": "string",
                                                    "example": "yuOJkjdPXMd..."
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "summary": "Refresh Token",
                "description": "Refresh a Temporary Access Token.",
                "tags": [
                    "Authentication"
                ],
                "operationId": "refresh",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "refresh_token": {
                                        "type": "string",
                                        "example": "eyJ0eXAiOiJKV...",
                                        "description": "JWT access token you want to refresh. This token can't be expired."
                                    },
                                    "mode": {
                                        "type": "string",
                                        "enum": [
                                            "json",
                                            "cookie",
                                            "session"
                                        ],
                                        "default": "json",
                                        "description": "Whether to submit and retrieve the refresh token in the JSON response, or in a httpOnly cookie."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "access_token": {
                                                    "type": "string",
                                                    "example": "eyJhbGciOiJI..."
                                                },
                                                "expires": {
                                                    "type": "integer",
                                                    "example": 900
                                                },
                                                "refresh_token": {
                                                    "type": "string",
                                                    "example": "Gy-caJMpmGTA..."
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "summary": "Log Out",
                "description": "Log Out",
                "tags": [
                    "Authentication"
                ],
                "operationId": "logout",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "refresh_token": {
                                        "type": "string",
                                        "example": "eyJ0eXAiOiJKV...",
                                        "description": "The refresh token to invalidate. If you have the refresh token in a cookie through /auth/login, you don't have to submit it here."
                                    },
                                    "mode": {
                                        "type": "string",
                                        "enum": [
                                            "json",
                                            "cookie",
                                            "session"
                                        ],
                                        "description": "Whether the refresh token is submitted in the JSON response, or in a httpOnly cookie."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Request successful"
                    }
                }
            }
        },
        "/auth/password/request": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "operationId": "passwordRequest",
                "summary": "Request a Password Reset",
                "description": "Request a reset password email to be send.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "email"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "example": "admin@example.com",
                                        "description": "Email address of the user you're requesting a reset for."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    }
                }
            }
        },
        "/auth/password/reset": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "operationId": "passwordReset",
                "summary": "Reset a Password",
                "description": "The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "token",
                                    "password"
                                ],
                                "properties": {
                                    "token": {
                                        "type": "string",
                                        "example": "eyJ0eXAiOiJKV1Qi...",
                                        "description": "One-time use JWT token that is used to verify the user."
                                    },
                                    "password": {
                                        "type": "string",
                                        "example": "password",
                                        "format": "password",
                                        "description": "New password for the user."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    }
                }
            }
        },
        "/auth/oauth": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "operationId": "oauth",
                "summary": "List OAuth Providers",
                "description": "List configured OAuth providers.",
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "public": {
                                            "type": "boolean"
                                        },
                                        "data": {
                                            "type": "array",
                                            "example": [
                                                "github",
                                                "facebook"
                                            ],
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    }
                }
            }
        },
        "/auth/oauth/{provider}": {
            "get": {
                "summary": "Authenticated using an OAuth provider",
                "description": "Start OAuth flow using the specified provider",
                "tags": [
                    "Authentication"
                ],
                "operationId": "oauthProvider",
                "parameters": [
                    {
                        "name": "provider",
                        "in": "path",
                        "description": "Key of the activated OAuth provider.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "redirect",
                        "in": "query",
                        "required": false,
                        "description": "Where to redirect on successful login.<br/>If set the authentication details are set inside cookies otherwise a JSON is returned.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "public": {
                                            "type": "boolean"
                                        },
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "token": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    }
                }
            }
        },
        "/server/info": {
            "get": {
                "summary": "System Info",
                "description": "Perform a system status check and return the options.",
                "operationId": "serverInfo",
                "parameters": [
                    {
                        "description": "The first time you create a project, the provided token will be saved and required for subsequent project installs. It can also be found and configured in `/config/__api.json` on your server.",
                        "in": "query",
                        "name": "super_admin_token",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Successful request"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    }
                },
                "tags": [
                    "Server"
                ]
            }
        },
        "/server/ping": {
            "get": {
                "summary": "Ping",
                "description": "Ping, pong. Ping.. pong.",
                "operationId": "ping",
                "responses": {
                    "200": {
                        "content": {
                            "application/text": {
                                "schema": {
                                    "type": "string",
                                    "pattern": "pong",
                                    "example": "pong"
                                }
                            }
                        },
                        "description": "Successful request"
                    }
                },
                "tags": [
                    "Server"
                ]
            }
        },
        "/utils/hash/generate": {
            "post": {
                "summary": "Hash a string",
                "description": "Generate a hash for a given string.",
                "operationId": "hash-generate",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "string": {
                                        "description": "String to hash.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "string"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "string",
                                            "example": "$argon2i$v=19$m=4096,t=3,p=1$pOyIa/zmRAjCVLb2f7kOyg$DasoO6LzMM+6iKfzCDq6JbsYsZWLSm33p7i9NxL9mDc"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Successful request"
                    }
                },
                "tags": [
                    "Utilities"
                ]
            }
        },
        "/utils/hash/verify": {
            "post": {
                "summary": "Hash a string",
                "description": "Generate a hash for a given string.",
                "operationId": "hash-verify",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "string": {
                                        "description": "String to hash.",
                                        "type": "string"
                                    },
                                    "hash": {
                                        "description": "Hash you want to verify against.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "string",
                                    "hash"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Successful request"
                    }
                },
                "tags": [
                    "Utilities"
                ]
            }
        },
        "/utils/sort/{collection}": {
            "post": {
                "summary": "Sort Items",
                "description": "Re-sort items in collection based on start and to value of item",
                "operationId": "sort",
                "parameters": [
                    {
                        "description": "Collection identifier",
                        "in": "path",
                        "name": "collection",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "item": {
                                        "description": "Primary key of item to move",
                                        "type": "number"
                                    },
                                    "to": {
                                        "description": "Primary key of item where to move the current item to",
                                        "type": "number"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful request"
                    }
                },
                "tags": [
                    "Utilities"
                ]
            }
        },
        "/utils/import/{collection}": {
            "post": {
                "summary": "Import Items",
                "description": "Import multiple records from a JSON or CSV file into a collection.",
                "operationId": "import",
                "parameters": [
                    {
                        "description": "Collection identifier",
                        "in": "path",
                        "name": "collection",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful request"
                    }
                },
                "tags": [
                    "Utilities"
                ]
            }
        },
        "/utils/export/{collection}": {
            "post": {
                "summary": "Export Items",
                "description": "Export a larger data set to a file in the File Library",
                "operationId": "export",
                "parameters": [
                    {
                        "description": "Collection identifier",
                        "in": "path",
                        "name": "collection",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "format": {
                                        "description": "What file format to save the export to. One of csv, xml, json",
                                        "type": "string",
                                        "enum": [
                                            "csv",
                                            "xml",
                                            "json"
                                        ]
                                    },
                                    "query": {
                                        "$ref": "#/components/schemas/Query"
                                    },
                                    "file": {
                                        "$ref": "#/components/schemas/Files"
                                    }
                                },
                                "required": [
                                    "format",
                                    "query",
                                    "file"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful request"
                    }
                },
                "tags": [
                    "Utilities"
                ]
            }
        },
        "/utils/cache/clear": {
            "post": {
                "summary": "Clear Cache",
                "description": "Resets both the data and schema cache of Directus.",
                "operationId": "clear-cache",
                "responses": {
                    "200": {
                        "description": "Successful request"
                    }
                },
                "tags": [
                    "Utilities"
                ]
            }
        },
        "/utils/random/string": {
            "get": {
                "summary": "Get a Random String",
                "description": "Returns a random string of given length.",
                "operationId": "random",
                "parameters": [
                    {
                        "description": "Length of the random string.",
                        "in": "query",
                        "name": "length",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "string",
                                            "example": "1>M3+4oh.S"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Successful request"
                    }
                },
                "tags": [
                    "Utilities"
                ]
            }
        },
        "/files": {
            "get": {
                "summary": "List Files",
                "description": "List the files.",
                "tags": [
                    "Files"
                ],
                "operationId": "getFiles",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Fields"
                    },
                    {
                        "$ref": "#/components/parameters/Limit"
                    },
                    {
                        "$ref": "#/components/parameters/Offset"
                    },
                    {
                        "$ref": "#/components/parameters/Sort"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    },
                    {
                        "$ref": "#/components/parameters/Search"
                    },
                    {
                        "$ref": "#/components/parameters/Meta"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Files"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/x-metadata"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    }
                }
            },
            "post": {
                "summary": "Create a File",
                "description": "Create a new file",
                "tags": [
                    "Files"
                ],
                "operationId": "createFile",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Files"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    }
                }
            },
            "delete": {
                "summary": "Delete Multiple Files",
                "description": "Delete multiple existing files.",
                "tags": [
                    "Files"
                ],
                "operationId": "deleteFiles",
                "responses": {
                    "200": {
                        "description": "Successful request"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    }
                }
            }
        },
        "/files/{id}": {
            "get": {
                "summary": "Retrieve a Files",
                "description": "Retrieve a single file by unique identifier.",
                "tags": [
                    "Files"
                ],
                "operationId": "getFile",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/UUId"
                    },
                    {
                        "$ref": "#/components/parameters/Fields"
                    },
                    {
                        "$ref": "#/components/parameters/Meta"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Files"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    }
                }
            },
            "delete": {
                "summary": "Delete a File",
                "description": "Delete an existing file.",
                "tags": [
                    "Files"
                ],
                "operationId": "deleteFile",
                "responses": {
                    "200": {
                        "description": "Successful request"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/components/parameters/UUId"
                    }
                ]
            }
        },
        "/fields": {
            "get": {
                "summary": "List All Fields",
                "description": "Returns a list of the fields available in the project.",
                "operationId": "getFields",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Limit"
                    },
                    {
                        "$ref": "#/components/parameters/Sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Fields"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    }
                },
                "tags": [
                    "Fields"
                ]
            }
        },
        "/fields/{collection}": {
            "get": {
                "summary": "List Fields in Collection",
                "description": "Returns a list of the fields available in the given collection.",
                "operationId": "getCollectionFields",
                "parameters": [
                    {
                        "description": "Unique identifier of the collection the item resides in.",
                        "in": "path",
                        "name": "collection",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/Sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Fields"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    }
                },
                "tags": [
                    "Fields"
                ]
            }
        },
        "/fields/{collection}/{id}": {
            "get": {
                "summary": "Retrieve a Field",
                "description": "Retrieves the details of a single field in a given collection.",
                "operationId": "getCollectionField",
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Fields"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    }
                },
                "tags": [
                    "Fields"
                ],
                "parameters": [
                    {
                        "name": "collection",
                        "in": "path",
                        "description": "Unique identifier of the collection the item resides in.",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Unique identifier of the field.",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/users": {
            "get": {
                "summary": "List Users",
                "description": "List the users.",
                "operationId": "getUsers",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Fields"
                    },
                    {
                        "$ref": "#/components/parameters/Limit"
                    },
                    {
                        "$ref": "#/components/parameters/Offset"
                    },
                    {
                        "$ref": "#/components/parameters/Meta"
                    },
                    {
                        "$ref": "#/components/parameters/Sort"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    },
                    {
                        "$ref": "#/components/parameters/Search"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Users"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/x-metadata"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    }
                },
                "tags": [
                    "Users"
                ]
            }
        },
        "/users/{id}": {
            "get": {
                "summary": "Retrieve a User",
                "description": "Retrieve a single user by unique identifier.",
                "operationId": "getUser",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/UUId"
                    },
                    {
                        "$ref": "#/components/parameters/Fields"
                    },
                    {
                        "$ref": "#/components/parameters/Meta"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Users"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    }
                },
                "tags": [
                    "Users"
                ]
            }
        },
        "/users/invite": {},
        "/users/invite/accept": {},
        "/users/me": {
            "get": {
                "summary": "Retrieve Current User",
                "description": "Retrieve the currently authenticated user.",
                "operationId": "getMe",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Fields"
                    },
                    {
                        "$ref": "#/components/parameters/Meta"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Users"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    }
                },
                "tags": [
                    "Users"
                ]
            }
        },
        "/users/me/track/page": {},
        "/users/me/tfa/enable": {},
        "/users/me/tfa/disable": {},
        "/items/objekt": {
            "post": {
                "summary": "Create an Item",
                "description": "Create a new objekt item.",
                "tags": [
                    "Items",
                    "ItemsObjekt"
                ],
                "operationId": "createItemsObjekt",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Meta"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/ItemsObjekt"
                                        }
                                    },
                                    {
                                        "$ref": "#/components/schemas/ItemsObjekt"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "items": {
                                                "$ref": "#/components/schemas/ItemsObjekt"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    }
                }
            },
            "get": {
                "summary": "List Items",
                "description": "List the objekt items.",
                "tags": [
                    "Items",
                    "ItemsObjekt"
                ],
                "operationId": "readItemsObjekt",
                "security": [
                    {
                        "Auth": []
                    }
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Fields"
                    },
                    {
                        "$ref": "#/components/parameters/Limit"
                    },
                    {
                        "$ref": "#/components/parameters/Meta"
                    },
                    {
                        "$ref": "#/components/parameters/Offset"
                    },
                    {
                        "$ref": "#/components/parameters/Sort"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    },
                    {
                        "$ref": "#/components/parameters/Search"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "$ref": "#/components/schemas/ItemsObjekt"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/x-metadata"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    }
                }
            },
            "patch": {
                "summary": "Update Multiple Items",
                "description": "Update multiple objekt items at the same time.",
                "tags": [
                    "Items",
                    "ItemsObjekt"
                ],
                "operationId": "updateItemsObjekt",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Fields"
                    },
                    {
                        "$ref": "#/components/parameters/Limit"
                    },
                    {
                        "$ref": "#/components/parameters/Meta"
                    },
                    {
                        "$ref": "#/components/parameters/Offset"
                    },
                    {
                        "$ref": "#/components/parameters/Sort"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    },
                    {
                        "$ref": "#/components/parameters/Search"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/ItemsObjekt"
                                        }
                                    },
                                    {
                                        "$ref": "#/components/schemas/ItemsObjekt"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "items": {
                                                "$ref": "#/components/schemas/ItemsObjekt"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Multiple Items",
                "description": "Delete multiple existing objekt items.",
                "tags": [
                    "Items",
                    "ItemsObjekt"
                ],
                "operationId": "deleteItemsObjekt",
                "responses": {
                    "200": {
                        "description": "Successful request"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    }
                },
                "parameters": []
            }
        },
        "/items/objekt/{id}": {
            "get": {
                "summary": "Retrieve an Item",
                "description": "Retrieve a single objekt item by unique identifier.",
                "tags": [
                    "Items",
                    "ItemsObjekt"
                ],
                "operationId": "readSingleItemsObjekt",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Fields"
                    },
                    {
                        "$ref": "#/components/parameters/Meta"
                    },
                    {
                        "$ref": "#/components/parameters/Version"
                    },
                    {
                        "name": "id",
                        "description": "Index of the item.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "description": "Incremental index of the item.",
                                    "example": 1
                                },
                                {
                                    "type": "string",
                                    "description": "Unique identifier of the item.",
                                    "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "$ref": "#/components/schemas/ItemsObjekt"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    }
                }
            },
            "patch": {
                "summary": "Update an Item",
                "description": "Update an existing objekt item.",
                "tags": [
                    "Items",
                    "ItemsObjekt"
                ],
                "operationId": "updateSingleItemsObjekt",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Fields"
                    },
                    {
                        "$ref": "#/components/parameters/Meta"
                    },
                    {
                        "name": "id",
                        "description": "Index of the item.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "description": "Incremental index of the item.",
                                    "example": 1
                                },
                                {
                                    "type": "string",
                                    "description": "Unique identifier of the item.",
                                    "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                                }
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "$ref": "#/components/schemas/ItemsObjekt"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "$ref": "#/components/schemas/ItemsObjekt"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    }
                }
            },
            "delete": {
                "summary": "Delete an Item",
                "description": "Delete an existing objekt item.",
                "tags": [
                    "Items",
                    "ItemsObjekt"
                ],
                "operationId": "deleteSingleItemsObjekt",
                "responses": {
                    "200": {
                        "description": "Successful request"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "Index of the item.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "description": "Incremental index of the item.",
                                    "example": 1
                                },
                                {
                                    "type": "string",
                                    "description": "Unique identifier of the item.",
                                    "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "/items/bewertungKleinerKreis": {
            "post": {
                "summary": "Create an Item",
                "description": "Create a new bewertungKleinerKreis item.",
                "tags": [
                    "Items",
                    "ItemsBewertungKleinerKreis"
                ],
                "operationId": "createItemsBewertungKleinerKreis",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Meta"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/ItemsBewertungKleinerKreis"
                                        }
                                    },
                                    {
                                        "$ref": "#/components/schemas/ItemsBewertungKleinerKreis"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "items": {
                                                "$ref": "#/components/schemas/ItemsBewertungKleinerKreis"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    }
                }
            },
            "get": {
                "summary": "List Items",
                "description": "List the bewertungKleinerKreis items.",
                "tags": [
                    "Items",
                    "ItemsBewertungKleinerKreis"
                ],
                "operationId": "readItemsBewertungKleinerKreis",
                "security": [
                    {
                        "Auth": []
                    }
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Fields"
                    },
                    {
                        "$ref": "#/components/parameters/Limit"
                    },
                    {
                        "$ref": "#/components/parameters/Meta"
                    },
                    {
                        "$ref": "#/components/parameters/Offset"
                    },
                    {
                        "$ref": "#/components/parameters/Sort"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    },
                    {
                        "$ref": "#/components/parameters/Search"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "$ref": "#/components/schemas/ItemsBewertungKleinerKreis"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/x-metadata"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    }
                }
            }
        },
        "/items/bewertungKleinerKreis/{id}": {
            "get": {
                "summary": "Retrieve an Item",
                "description": "Retrieve a single bewertungKleinerKreis item by unique identifier.",
                "tags": [
                    "Items",
                    "ItemsBewertungKleinerKreis"
                ],
                "operationId": "readSingleItemsBewertungKleinerKreis",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Fields"
                    },
                    {
                        "$ref": "#/components/parameters/Meta"
                    },
                    {
                        "$ref": "#/components/parameters/Version"
                    },
                    {
                        "name": "id",
                        "description": "Index of the item.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "description": "Incremental index of the item.",
                                    "example": 1
                                },
                                {
                                    "type": "string",
                                    "description": "Unique identifier of the item.",
                                    "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "$ref": "#/components/schemas/ItemsBewertungKleinerKreis"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    }
                }
            }
        },
        "/items/objekt_files": {
            "post": {
                "summary": "Create an Item",
                "description": "Create a new objekt_files item.",
                "tags": [
                    "Items",
                    "ItemsObjektFiles"
                ],
                "operationId": "createItemsObjektFiles",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Meta"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/ItemsObjektFiles"
                                        }
                                    },
                                    {
                                        "$ref": "#/components/schemas/ItemsObjektFiles"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "items": {
                                                "$ref": "#/components/schemas/ItemsObjektFiles"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    }
                }
            },
            "get": {
                "summary": "List Items",
                "description": "List the objekt_files items.",
                "tags": [
                    "Items",
                    "ItemsObjektFiles"
                ],
                "operationId": "readItemsObjektFiles",
                "security": [
                    {
                        "Auth": []
                    }
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Fields"
                    },
                    {
                        "$ref": "#/components/parameters/Limit"
                    },
                    {
                        "$ref": "#/components/parameters/Meta"
                    },
                    {
                        "$ref": "#/components/parameters/Offset"
                    },
                    {
                        "$ref": "#/components/parameters/Sort"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    },
                    {
                        "$ref": "#/components/parameters/Search"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "$ref": "#/components/schemas/ItemsObjektFiles"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/x-metadata"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    }
                }
            },
            "patch": {
                "summary": "Update Multiple Items",
                "description": "Update multiple objekt_files items at the same time.",
                "tags": [
                    "Items",
                    "ItemsObjektFiles"
                ],
                "operationId": "updateItemsObjektFiles",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Fields"
                    },
                    {
                        "$ref": "#/components/parameters/Limit"
                    },
                    {
                        "$ref": "#/components/parameters/Meta"
                    },
                    {
                        "$ref": "#/components/parameters/Offset"
                    },
                    {
                        "$ref": "#/components/parameters/Sort"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    },
                    {
                        "$ref": "#/components/parameters/Search"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/ItemsObjektFiles"
                                        }
                                    },
                                    {
                                        "$ref": "#/components/schemas/ItemsObjektFiles"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "items": {
                                                "$ref": "#/components/schemas/ItemsObjektFiles"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete Multiple Items",
                "description": "Delete multiple existing objekt_files items.",
                "tags": [
                    "Items",
                    "ItemsObjektFiles"
                ],
                "operationId": "deleteItemsObjektFiles",
                "responses": {
                    "200": {
                        "description": "Successful request"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    }
                },
                "parameters": []
            }
        },
        "/items/objekt_files/{id}": {
            "get": {
                "summary": "Retrieve an Item",
                "description": "Retrieve a single objekt_files item by unique identifier.",
                "tags": [
                    "Items",
                    "ItemsObjektFiles"
                ],
                "operationId": "readSingleItemsObjektFiles",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Fields"
                    },
                    {
                        "$ref": "#/components/parameters/Meta"
                    },
                    {
                        "$ref": "#/components/parameters/Version"
                    },
                    {
                        "name": "id",
                        "description": "Index of the item.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "description": "Incremental index of the item.",
                                    "example": 1
                                },
                                {
                                    "type": "string",
                                    "description": "Unique identifier of the item.",
                                    "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "$ref": "#/components/schemas/ItemsObjektFiles"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    }
                }
            },
            "patch": {
                "summary": "Update an Item",
                "description": "Update an existing objekt_files item.",
                "tags": [
                    "Items",
                    "ItemsObjektFiles"
                ],
                "operationId": "updateSingleItemsObjektFiles",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Fields"
                    },
                    {
                        "$ref": "#/components/parameters/Meta"
                    },
                    {
                        "name": "id",
                        "description": "Index of the item.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "description": "Incremental index of the item.",
                                    "example": 1
                                },
                                {
                                    "type": "string",
                                    "description": "Unique identifier of the item.",
                                    "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                                }
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "$ref": "#/components/schemas/ItemsObjektFiles"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "$ref": "#/components/schemas/ItemsObjektFiles"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    }
                }
            },
            "delete": {
                "summary": "Delete an Item",
                "description": "Delete an existing objekt_files item.",
                "tags": [
                    "Items",
                    "ItemsObjektFiles"
                ],
                "operationId": "deleteSingleItemsObjektFiles",
                "responses": {
                    "200": {
                        "description": "Successful request"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError"
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "Index of the item.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "description": "Incremental index of the item.",
                                    "example": 1
                                },
                                {
                                    "type": "string",
                                    "description": "Unique identifier of the item.",
                                    "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                                }
                            ]
                        }
                    }
                ]
            }
        }
    },
    "tags": [
        {
            "name": "Assets",
            "description": "Image typed files can be dynamically resized and transformed to fit any need."
        },
        {
            "name": "Authentication",
            "description": "All data within the platform is private by default. The public role can be configured to expose data without authentication, or you can pass an access token to the API to access private data."
        },
        {
            "name": "Server",
            "description": "Access to where Directus runs. Allows you to make sure your server has everything needed to run the platform, and check what kind of latency we're dealing with."
        },
        {
            "name": "Utilities",
            "description": "Directus comes with various utility endpoints you can use to simplify your development flow.",
            "x-authentication": "user",
            "x-schemas": [
                "Files",
                "Folders",
                "Users",
                "Roles"
            ]
        },
        {
            "name": "Files",
            "description": "Files can be saved in any given location. Directus has a powerful assets endpoint that can be used to generate thumbnails for images on the fly.",
            "x-collection": "directus_files"
        },
        {
            "name": "Fields",
            "description": "Fields are individual pieces of content within an item. They are mapped to columns in the database.",
            "x-collection": "directus_fields"
        },
        {
            "name": "Users",
            "description": "Users are what gives you access to the data.",
            "x-collection": "directus_users"
        },
        {
            "name": "ItemsObjekt",
            "x-collection": "objekt",
            "description": "Objekte, die für die Ausstellung eingereicht sind und geprüft werden können"
        },
        {
            "name": "ItemsBewertungKleinerKreis",
            "x-collection": "bewertungKleinerKreis"
        },
        {
            "name": "ItemsObjektFiles",
            "x-collection": "objekt_files"
        }
    ],
    "components": {
        "schemas": {
            "Files": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the file.",
                        "example": "8cbb43fe-4cdf-4991-8352-c461779cec02",
                        "type": "string"
                    },
                    "storage": {
                        "description": "Where the file is stored. Either `local` for the local filesystem or the name of the storage adapter (for example `s3`).",
                        "example": "local",
                        "type": "string"
                    },
                    "filename_disk": {
                        "description": "Name of the file on disk. By default, Directus uses a random hash for the filename.",
                        "example": "a88c3b72-ac58-5436-a4ec-b2858531333a.jpg",
                        "type": "string"
                    },
                    "filename_download": {
                        "description": "How you want to the file to be named when it's being downloaded.",
                        "example": "avatar.jpg",
                        "type": "string"
                    },
                    "title": {
                        "description": "Title for the file. Is extracted from the filename on upload, but can be edited by the user.",
                        "example": "User Avatar",
                        "type": "string"
                    },
                    "type": {
                        "description": "MIME type of the file.",
                        "example": "image/jpeg",
                        "type": "string"
                    },
                    "folder": {
                        "description": "Virtual folder where this file resides in.",
                        "example": null,
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "$ref": "#/components/schemas/Folders"
                            }
                        ],
                        "nullable": true
                    },
                    "uploaded_by": {
                        "description": "Who uploaded the file.",
                        "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "$ref": "#/components/schemas/Users"
                            }
                        ]
                    },
                    "created_on": {
                        "description": "When the file was created.",
                        "example": "2019-12-03T00:10:15+00:00",
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_by": {
                        "nullable": true,
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "uuid"
                            },
                            {
                                "$ref": "#/components/schemas/Users"
                            }
                        ]
                    },
                    "modified_on": {
                        "nullable": false,
                        "type": "string",
                        "format": "timestamp"
                    },
                    "charset": {
                        "description": "Character set of the file.",
                        "example": "binary",
                        "type": "string",
                        "nullable": true
                    },
                    "filesize": {
                        "description": "Size of the file in bytes.",
                        "example": 137862,
                        "type": "integer"
                    },
                    "width": {
                        "description": "Width of the file in pixels. Only applies to images.",
                        "example": 800,
                        "type": "integer",
                        "nullable": true
                    },
                    "height": {
                        "description": "Height of the file in pixels. Only applies to images.",
                        "example": 838,
                        "type": "integer",
                        "nullable": true
                    },
                    "duration": {
                        "description": "Duration of the file in seconds. Only applies to audio and video.",
                        "example": 0,
                        "type": "integer",
                        "nullable": true
                    },
                    "embed": {
                        "description": "Where the file was embedded from.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                    },
                    "description": {
                        "description": "Description for the file.",
                        "type": "string",
                        "nullable": true
                    },
                    "location": {
                        "description": "Where the file was created. Is automatically populated based on Exif data for images.",
                        "type": "string",
                        "nullable": true
                    },
                    "tags": {
                        "description": "Tags for the file. Is automatically populated based on Exif data for images.",
                        "type": "array",
                        "nullable": true,
                        "items": {
                            "type": "string"
                        }
                    },
                    "metadata": {
                        "description": "IPTC, Exif, and ICC metadata extracted from file",
                        "type": "object",
                        "nullable": true
                    },
                    "focal_point_x": {
                        "nullable": true,
                        "type": "integer"
                    },
                    "focal_point_y": {
                        "nullable": true,
                        "type": "integer"
                    },
                    "tus_id": {
                        "nullable": true,
                        "type": "string"
                    },
                    "tus_data": {
                        "nullable": true
                    },
                    "uploaded_on": {
                        "description": "When the file was last uploaded/replaced.",
                        "example": "2019-12-03T00:10:15+00:00",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "x-collection": "directus_files"
            },
            "Folders": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the folder.",
                        "example": "0cf0e03d-4364-45df-b77b-ca61f61869d2",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the folder.",
                        "example": "New York",
                        "type": "string"
                    },
                    "parent": {
                        "description": "Unique identifier of the parent folder. This allows for nested folders.",
                        "example": null,
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "$ref": "#/components/schemas/Folders"
                            }
                        ],
                        "nullable": true
                    }
                },
                "x-collection": "directus_folders"
            },
            "Roles": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the role.",
                        "example": "2f24211d-d928-469a-aea3-3c8f53d4e426",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the role.",
                        "example": "Administrator",
                        "type": "string"
                    },
                    "icon": {
                        "description": "The role's icon.",
                        "example": "verified_user",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the role.",
                        "example": "Admins have access to all managed data within the system by default",
                        "type": "string",
                        "nullable": true
                    },
                    "ip_access": {
                        "description": "Array of IP addresses that are allowed to connect to the API as a user of this role.",
                        "example": [],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "enforce_tfa": {
                        "description": "Whether or not this role enforces the use of 2FA.",
                        "example": false,
                        "type": "boolean"
                    },
                    "admin_access": {
                        "description": "Admin role. If true, skips all permission checks.",
                        "example": false,
                        "type": "boolean"
                    },
                    "app_access": {
                        "description": "The users in the role are allowed to use the app.",
                        "example": true,
                        "type": "boolean"
                    }
                },
                "x-collection": "directus_roles"
            },
            "Users": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the user.",
                        "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
                        "type": "string"
                    },
                    "role": {
                        "description": "Unique identifier of the role of this user.",
                        "example": "2f24211d-d928-469a-aea3-3c8f53d4e426",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "$ref": "#/components/schemas/Roles"
                            }
                        ]
                    }
                },
                "x-collection": "directus_users"
            },
            "Query": {
                "type": "object",
                "properties": {
                    "fields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Control what fields are being returned in the object.",
                        "example": [
                            "*",
                            "*.*"
                        ]
                    },
                    "filter": {
                        "type": "object",
                        "example": {
                            "<field>": {
                                "<operator>": "<value>"
                            }
                        }
                    },
                    "search": {
                        "description": "Filter by items that contain the given search query in one of their fields.",
                        "type": "string"
                    },
                    "sort": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "How to sort the returned items.",
                        "example": [
                            "-date_created"
                        ]
                    },
                    "limit": {
                        "type": "number",
                        "description": "Set the maximum number of items that will be returned"
                    },
                    "offset": {
                        "type": "number",
                        "description": "How many items to skip when fetching data."
                    },
                    "page": {
                        "type": "number",
                        "description": "Cursor for use in pagination. Often used in combination with limit."
                    },
                    "deep": {
                        "type": "object",
                        "description": "Deep allows you to set any of the other query parameters on a nested relational dataset.",
                        "example": {
                            "related_articles": {
                                "_limit": 3
                            }
                        }
                    }
                }
            },
            "x-metadata": {
                "type": "object",
                "properties": {
                    "total_count": {
                        "description": "Returns the total item count of the collection you're querying.",
                        "type": "integer"
                    },
                    "filter_count": {
                        "description": "Returns the item count of the collection you're querying, taking the current filter/search parameters into account.",
                        "type": "integer"
                    }
                }
            },
            "Fields": {
                "type": "object",
                "properties": {
                    "id": {
                        "nullable": false,
                        "type": "integer"
                    },
                    "collection": {
                        "description": "Unique name of the collection this field is in.",
                        "example": "about_us",
                        "type": "string"
                    },
                    "field": {
                        "description": "Unique name of the field. Field name is unique within the collection.",
                        "example": "id",
                        "type": "string"
                    },
                    "special": {
                        "nullable": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "interface": {
                        "nullable": true,
                        "type": "string"
                    },
                    "options": {
                        "nullable": true
                    },
                    "display": {
                        "nullable": true,
                        "type": "string"
                    },
                    "display_options": {
                        "nullable": true
                    },
                    "readonly": {
                        "nullable": false,
                        "type": "boolean"
                    },
                    "hidden": {
                        "nullable": false,
                        "type": "boolean"
                    },
                    "sort": {
                        "nullable": true,
                        "type": "integer"
                    },
                    "width": {
                        "nullable": true,
                        "type": "string"
                    },
                    "translations": {
                        "nullable": true
                    },
                    "note": {
                        "nullable": true,
                        "type": "string"
                    },
                    "conditions": {
                        "nullable": true
                    },
                    "required": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "group": {
                        "nullable": true,
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "$ref": "#/components/schemas/Fields"
                            }
                        ]
                    },
                    "validation": {
                        "nullable": true
                    },
                    "validation_message": {
                        "nullable": true,
                        "type": "string"
                    }
                },
                "x-collection": "directus_fields"
            },
            "ItemsObjekt": {
                "type": "object",
                "properties": {
                    "id": {
                        "nullable": false,
                        "type": "integer"
                    },
                    "status": {
                        "nullable": false,
                        "type": "string"
                    },
                    "user_created": {
                        "nullable": true,
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "uuid"
                            },
                            {
                                "$ref": "#/components/schemas/Users"
                            }
                        ]
                    },
                    "date_created": {
                        "nullable": true,
                        "type": "string",
                        "format": "timestamp"
                    },
                    "user_updated": {
                        "nullable": true,
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "uuid"
                            },
                            {
                                "$ref": "#/components/schemas/Users"
                            }
                        ]
                    },
                    "date_updated": {
                        "nullable": true,
                        "type": "string",
                        "format": "timestamp"
                    },
                    "name": {
                        "nullable": true,
                        "type": "string"
                    },
                    "datierung": {
                        "nullable": true,
                        "type": "string"
                    },
                    "abbildung": {
                        "nullable": true,
                        "description": "Foto / Abbildung, auf dem das Objekt gezeigt wird",
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "uuid"
                            },
                            {
                                "$ref": "#/components/schemas/Files"
                            }
                        ]
                    },
                    "beschreibung": {
                        "nullable": true,
                        "type": "string"
                    },
                    "art": {
                        "nullable": true,
                        "type": "string"
                    },
                    "format": {
                        "nullable": true,
                        "type": "string"
                    },
                    "einreicherName": {
                        "nullable": true,
                        "type": "string"
                    },
                    "einreicherGemeinde": {
                        "nullable": true,
                        "type": "string"
                    },
                    "kontaktRueckfrage": {
                        "nullable": true,
                        "type": "string"
                    },
                    "objektAusleihenFuerAusstellung": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "bewertung": {
                        "nullable": true,
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "$ref": "#/components/schemas/ItemsBewertungKleinerKreis"
                            }
                        ]
                    },
                    "kategorie": {
                        "nullable": true,
                        "description": "Kategorie/Überschrift zur Gruppierung von Objekten"
                    },
                    "aktuellerStandort": {
                        "nullable": true,
                        "type": "string"
                    },
                    "anmerkung": {
                        "nullable": true,
                        "type": "string"
                    },
                    "type": {
                        "nullable": true,
                        "type": "string"
                    },
                    "anmerkungEinreicher": {
                        "nullable": true,
                        "type": "string"
                    },
                    "weitereAbbildungen": {
                        "nullable": true,
                        "description": "Weitere Abbildungen oder ergänzende Dateien",
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "$ref": "#/components/schemas/ItemsObjektFiles"
                                }
                            ]
                        }
                    }
                },
                "x-collection": "objekt"
            },
            "ItemsBewertungKleinerKreis": {
                "type": "object",
                "properties": {
                    "id": {
                        "nullable": false,
                        "type": "integer"
                    },
                    "bezeichner": {
                        "nullable": true,
                        "type": "string"
                    },
                    "rangfolge": {
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "x-collection": "bewertungKleinerKreis"
            },
            "ItemsObjektFiles": {
                "type": "object",
                "properties": {
                    "id": {
                        "nullable": false,
                        "type": "integer"
                    },
                    "objekt_id": {
                        "nullable": true,
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "$ref": "#/components/schemas/ItemsObjekt"
                            }
                        ]
                    },
                    "directus_files_id": {
                        "nullable": true,
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "uuid"
                            },
                            {
                                "$ref": "#/components/schemas/Files"
                            }
                        ]
                    }
                },
                "x-collection": "objekt_files"
            }
        },
        "parameters": {
            "Id": {
                "description": "Index",
                "name": "id",
                "in": "path",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "UUId": {
                "description": "Unique identifier for the object.",
                "name": "id",
                "in": "path",
                "required": true,
                "schema": {
                    "example": "8cbb43fe-4cdf-4991-8352-c461779cec02",
                    "type": "string"
                }
            },
            "Collection": {
                "description": "Collection of which you want to retrieve the items from.",
                "name": "collection",
                "in": "path",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "Search": {
                "description": "Filter by items that contain the given search query in one of their fields.",
                "in": "query",
                "name": "search",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "Page": {
                "description": "Cursor for use in pagination. Often used in combination with limit.",
                "in": "query",
                "name": "page",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "Offset": {
                "description": "How many items to skip when fetching data.",
                "in": "query",
                "name": "offset",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "Sort": {
                "description": "How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.\n",
                "in": "query",
                "name": "sort",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "Meta": {
                "description": "What metadata to return in the response.",
                "in": "query",
                "name": "meta",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "Limit": {
                "description": "A limit on the number of objects that are returned.",
                "in": "query",
                "name": "limit",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "Filter": {
                "description": "Select items in collection by given conditions.",
                "in": "query",
                "name": "filter",
                "required": false,
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "example": {
                                "<field>": {
                                    "<operator>": "<value>"
                                }
                            }
                        }
                    }
                }
            },
            "Fields": {
                "description": "Control what fields are being returned in the object.",
                "in": "query",
                "name": "fields",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "Export": {
                "name": "export",
                "description": "Saves the API response to a file. Accepts one of \"csv\", \"json\", \"xml\", \"yaml\".",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string",
                    "enum": [
                        "csv",
                        "json",
                        "xml",
                        "yaml"
                    ]
                }
            },
            "Version": {
                "name": "version",
                "description": "Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.\n",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                }
            }
        },
        "responses": {
            "NotFoundError": {
                "description": "Error: Not found.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "object",
                                    "properties": {
                                        "code": {
                                            "type": "integer",
                                            "format": "int64"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "UnauthorizedError": {
                "description": "Error: Unauthorized request",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "object",
                                    "properties": {
                                        "code": {
                                            "type": "integer",
                                            "format": "int64"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "securitySchemes": {
            "KeyAuth": {
                "type": "apiKey",
                "in": "query",
                "name": "access_token"
            },
            "Auth": {
                "type": "apiKey",
                "in": "header",
                "name": "Authorization"
            }
        }
    }
}
